# -*- coding: utf-8 -*-
"""test_models_usecase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RBL3_QRaCownJRm9yoRsiw2hxMoD_m3y
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import darts as darts

#load csv file
df = pd.read_csv('test_nn.csv', sep=';')

#show first 5 rows
df.head()

def series_make(index):
    #load new variable with only the first and second column
    column1 = df.iloc[:,0]
    number_fill = index
    column2 = df.iloc[:,number_fill]
    df2 = pd.DataFrame({'Time': column1, 'F'+str(number_fill): column2})
    # Get name of the second column
    col2name = df2.columns[1]
    # Convert the second column to a float type and set it as the time series values
    values = df[col2name].astype(float).values
    # Create a TimeSeries object from the values, using the Time column as the time index (first column)
    time_index = darts.TimeSeries.from_times_and_values(df2.index, values)
    # Save as a TimeSeries object
    series = darts.TimeSeries.from_times_and_values(df2.index, values)

    return series

series1 = series_make(1)
series2 = series_make(2)
series3 = series_make(3)
series4 = series_make(4)
series5 = series_make(5)
series6 = series_make(6)
series7 = series_make(7)
series8 = series_make(8)
series9 = series_make(9)
series10 = series_make(10)
series11 = series_make(11)
series12 = series_make(12)
series13 = series_make(13)
series14 = series_make(14)
series15 = series_make(15)
series16 = series_make(16)
series17 = series_make(17)
series18 = series_make(18)

series1.plot(label='F1')
series2.plot(label='F2')
series3.plot(label='F3')
series4.plot(label='F4')
series5.plot(label='F5')
series6.plot(label='F6')
series7.plot(label='F7')
series8.plot(label='F8')
series9.plot(label='F9')
series10.plot(label='F10')
series11.plot(label='F11')
series12.plot(label='F12')
series13.plot(label='F13')
series14.plot(label='F14')
series15.plot(label='F15')
series16.plot(label='F16')
series17.plot(label='F17')
series18.plot(label='F18')
plt.legend()

from darts.dataprocessing.transformers import Scaler
scaler1, scaler2, scaler3, scaler4, scaler5, scaler6, scaler7, scaler8, scaler9, scaler10, scaler11, scaler12, scaler13, scaler14, scaler15, scaler16, scaler17, scaler18 = Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler(), Scaler()

series1_scaled = scaler1.fit_transform(series1)
series2_scaled = scaler2.fit_transform(series2)
series3_scaled = scaler3.fit_transform(series3)
series4_scaled = scaler4.fit_transform(series4)
series5_scaled = scaler5.fit_transform(series5)
series6_scaled = scaler6.fit_transform(series6)
series7_scaled = scaler7.fit_transform(series7)
series8_scaled = scaler8.fit_transform(series8)
series9_scaled = scaler9.fit_transform(series9)
series10_scaled = scaler10.fit_transform(series10)
series11_scaled = scaler11.fit_transform(series11)
series12_scaled = scaler12.fit_transform(series12)
series13_scaled = scaler13.fit_transform(series13)
series14_scaled = scaler14.fit_transform(series14)
series15_scaled = scaler15.fit_transform(series15)
series16_scaled = scaler16.fit_transform(series16)
series17_scaled = scaler17.fit_transform(series17)
series18_scaled = scaler18.fit_transform(series18)

series1_scaled.plot(label='F1')
series2_scaled.plot(label='F2')
series3_scaled.plot(label='F3')
series4_scaled.plot(label='F4')
series5_scaled.plot(label='F5')
series6_scaled.plot(label='F6')
series7_scaled.plot(label='F7')
series8_scaled.plot(label='F8')
series9_scaled.plot(label='F9')
series10_scaled.plot(label='F10')
series11_scaled.plot(label='F11')
series12_scaled.plot(label='F12')
series13_scaled.plot(label='F13')
series14_scaled.plot(label='F14')
series15_scaled.plot(label='F15')
series16_scaled.plot(label='F16')
series17_scaled.plot(label='F17')
series18_scaled.plot(label='F18')
plt.legend();

train_series1, val_series1 = series1_scaled.split_before(0.85)
train_series2, val_series2 = series2_scaled.split_before(0.85)
train_series3, val_series3 = series3_scaled.split_before(0.85)
train_series4, val_series4 = series4_scaled.split_before(0.85)
train_series5, val_series5 = series5_scaled.split_before(0.85)
train_series6, val_series6 = series6_scaled.split_before(0.85)
train_series7, val_series7 = series7_scaled.split_before(0.85)
train_series8, val_series8 = series8_scaled.split_before(0.85)
train_series9, val_series9 = series9_scaled.split_before(0.85)
train_series10, val_series10 = series10_scaled.split_before(0.85)
train_series11, val_series11 = series11_scaled.split_before(0.85)
train_series12, val_series12 = series12_scaled.split_before(0.85)
train_series13, val_series13 = series13_scaled.split_before(0.85)
train_series14, val_series14 = series14_scaled.split_before(0.85)
train_series15, val_series15 = series15_scaled.split_before(0.85)
train_series16, val_series16 = series16_scaled.split_before(0.85)
train_series17, val_series17 = series17_scaled.split_before(0.85)
train_series18, val_series18 = series18_scaled.split_before(0.85)

# Plot the training and validation series
train_series1.plot(label='F1 train')
val_series1.plot(label='F1 valid')
train_series2.plot(label='F2 train')
val_series2.plot(label='F2 valid')
train_series3.plot(label='F3 train')
val_series3.plot(label='F3 valid')
train_series4.plot(label='F4 train')
val_series4.plot(label='F4 valid')
train_series5.plot(label='F5 train')
val_series5.plot(label='F5 valid')
train_series6.plot(label='F6 train')
val_series6.plot(label='F6 valid')
train_series7.plot(label='F7 train')
val_series7.plot(label='F7 valid')
train_series8.plot(label='F8 train')
val_series8.plot(label='F8 valid')
train_series9.plot(label='F9 train')
val_series9.plot(label='F9 valid')
train_series10.plot(label='F10 train')
val_series10.plot(label='F10 valid')
train_series11.plot(label='F11 train')
val_series11.plot(label='F11 valid')
train_series12.plot(label='F12 train')
val_series12.plot(label='F12 valid')
train_series13.plot(label='F13 train')
val_series13.plot(label='F13 valid')
train_series14.plot(label='F14 train')
val_series14.plot(label='F14 valid')
train_series15.plot(label='F15 train')
val_series15.plot(label='F15 valid')
train_series16.plot(label='F16 train')
val_series16.plot(label='F16 valid')
train_series17.plot(label='F17 train')
val_series17.plot(label='F17 valid')
train_series18.plot(label='F18 train')
val_series18.plot(label='F18 valid')

from darts import TimeSeries
from darts.utils.timeseries_generation import gaussian_timeseries, linear_timeseries, sine_timeseries
from darts.models import RNNModel, TCNModel, TransformerModel, NBEATSModel, BlockRNNModel, StatsForecastAutoARIMA, Prophet, TFTModel
from darts.metrics import mape, smape, mase, mse, r2_score, mae, rmse

def predict(model_air, train_air, series_air_scaled):
    pred = model_air.predict(n=1300, series=train_air)

    series_air_scaled.plot(label='actual')
    pred.plot(label='forecast')
    plt.legend();

    mape_val = 0#mape(series_air_scaled, pred)
    smape_val = smape(series_air_scaled, pred)
    mase_val = mase(series_air_scaled, pred, train_air)
    mse_val = mse(series_air_scaled, pred)
    r2_val = r2_score(series_air_scaled, pred)
    mae_val = mae(series_air_scaled, pred)
    rmse_val = rmse(series_air_scaled, pred)

    print('MAPE = {:.2f}%'.format(mape_val))
    print('SMAPE = {:.2f}%'.format(smape_val))
    print('MASE = {:.2f}'.format(mase_val))
    print('MSE = {:.2f}'.format(mse_val))
    print('R2 = {:.2f}'.format(r2_val))
    print('MAE = {:.2f}'.format(mae_val))
    print('RMSE = {:.2f}'.format(rmse_val))
    
    return mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val

epochs = 500#1000

"""
    model = TransformerModel(
    input_chunk_length=24, 
    output_chunk_length=12, 
    n_epochs=epochs, 
    random_state=0,
    pl_trainer_kwargs={
        "accelerator": "gpu",
        "devices": [0]
    }
    )
"""

#optional
model_path = 'transformer.pt'
model = TransformerModel.load(model_path)
#--------

model.fit([train_series1, 
           train_series2, 
           train_series3, 
           train_series4, 
           train_series5, 
           train_series6, 
           train_series7, 
           train_series8, 
           train_series9, 
           train_series10, 
           train_series11, 
           train_series12, 
           train_series13, 
           train_series14, 
           train_series15, 
           train_series16, 
           train_series17, 
           train_series18], verbose=True)

total_mape = 0
total_smape = 0
total_mase = 0
total_mse = 0
total_r2 = 0
total_mae = 0
total_rmse = 0

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series1, series1_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series2, series2_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series3, series3_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series4, series4_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series5, series5_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series6, series6_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series7, series7_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series8, series8_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series9, series9_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series10, series10_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series11, series11_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series12, series12_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series13, series13_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series14, series14_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series15, series15_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series16, series16_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series17, series17_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

mape_val, smape_val, mase_val, mse_val, r2_val, mae_val, rmse_val = predict(model, train_series18, series18_scaled)
total_mape += float(mape_val)
total_smape += float(smape_val)
total_mase += float(mase_val)
total_mse += float(mse_val)
total_r2 += float(r2_val)
total_mae += float(mae_val)
total_rmse += float(rmse_val)

#mean of all above metrics
print('Mean MAPE: ', total_mape/18)
print('Mean SMAPE: ', total_smape/18)
print('Mean MASE: ', total_mase/18)
print('Mean MSE: ', total_mse/18)
print('Mean R2: ', total_r2/18)
print('Mean MAE: ', total_mae/18)
print('Mean RMSE: ', total_rmse/18)

model.save("transformer.pt")